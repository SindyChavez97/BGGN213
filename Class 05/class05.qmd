---
title: "Class 05 : Data Visualization with ggplot2"
author: Sindy
format: pdf
editor: visual
toc: TRUE
---

To submit - change line 4 format to pdf from html, then to hide chunks of r script that are not running correctly type in the thing below within the r code chunk #/ eval:false \# Our first plot

R has base graphics

```{r}
head(cars)
```

```{r}
plot(cars)
```

How would I plot this with 'ggplot2'? NO!

We need to install and load the ggplot2 package first. Type in **install.packages( )**

Put the name of the package inside the parenthesis and use quotes

After installing, you need to load the package each time you want to use it. Use the function **library( )**. You only need to load the packages that you will be using for that project. If R automatically loaded all the packages available when it opened, you'd slow your computer down. You need to load the library here in the source, as well as in the console (R brain). This way it will be saved into the environment of this particular project.

Once loaded, you can start plotting (with a few more steps)!

Every ggplot2 needs at least 3 layers

-   **Data** (i.e the data.frame we have)
-   **Aes** (the aesthetic mapping of our data to what we want to plot
-   **Geoms** (how we want to plot this stuff)

```{r}
library(ggplot2)
ggplot(data=cars) + aes(x=speed, y=dist) + geom_point()
```

```{r}
ggplot(data=cars) + aes(x=speed, y=dist) + geom_point() + geom_smooth()

ggplot(data=cars) + aes(x=speed, y=dist) + geom_point() + geom_smooth(method = lm, se = FALSE)
```

## A more interseting plot

First read data from online

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
nrow(genes)

```

There are `r nrow(genes)` genes in this data set.

Using **r nrow(genes)** allows you to insert a line of r (or any other program) code

The columns are named `r colnames(genes)` and there are `r ncol(genes)` of them

```{r}
table(genes[,4])[3]

table(genes$State)

nrow(genes)

table(genes$State)/nrow(genes)

round(table(genes$State)/nrow(genes) *100, 2)
```

There are `r table(genes[,4])[3]` 'up' regulated genes

(Extra Note:plotly is a package where you can hover over a point and see the gene)

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2) +
  geom_point()
```

```{r}
p <- ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point()
p + scale_colour_manual( values=c("blue","gray","red")) +  
  labs(title="Gene Expresion Changes Upon Drug Treatment",
       x="Control (no drug) ",
       y="Drug Treatment")
```
